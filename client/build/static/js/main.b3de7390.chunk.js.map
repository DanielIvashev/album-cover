{"version":3,"sources":["hooks/auth.hook.js","pages/MainPage.js","context/AuthContext.js","components/loader.js","hooks/http.hook.js","hooks/message.hook.js","components/CoverList.js","pages/CoversPage.js","pages/CreatePage.js","pages/AuthPage.js","pages/DetailPage.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["useAuth","useState","token","setToken","ready","setReady","userId","setUserId","userName","setUserName","login","useCallback","jwtToken","id","localStorage","setItem","JSON","stringify","logout","removeItem","useEffect","data","parse","getItem","MainPage","show","setShow","CSSTransition","classNames","in","timeout","mountOnEnter","unmountOnExit","className","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","to","type","style","transition","bottom","noop","AuthContext","createContext","isAuthenticated","Loader","role","useHttp","loading","setLoading","error","setError","message","setMessages","request","url","a","method","body","headers","create","fetch","response","json","clearError","useMessage","text","CoverList","covers","TransitionGroup","component","map","cover","index","key","_id","cursor","src","filedataName","alt","author","CoversPage","setCovers","useContext","skip","setSkip","alert","setAlert","shouldHideButton","setShouldHideButton","fetchCovers","Authorization","fetched","length","minHeight","textAlign","onClick","CreatePage","history","useHistory","auth","fileInputIsEmpty","setFileInputIsEmpty","useReducer","state","newState","label","date","genre","setCover","coverImage","setCoverImage","availableButton","changeHandler","evt","name","target","newValue","value","bsCustomFileInput","init","submitHandler","e","preventDefault","formData","FormData","append","setTimeout","push","onSubmit","encType","htmlFor","aria-describedby","onChange","files","disabled","AuthPage","password","form","setForm","registerHandler","loginHandler","DetailPage","coverId","useParams","getCover","borderRadius","useRoutes","path","exact","App","routes","Provider","position","right","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b3de7390.chunk.js","sourcesContent":["import {useCallback, useEffect, useState} from 'react';\r\n\r\nconst storageName = 'userData';\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null);\r\n    const [ready, setReady] = useState(false);\r\n    const [userId, setUserId] = useState(null);\r\n    const [userName, setUserName] = useState(null);\r\n\r\n    const login = useCallback( (jwtToken, id, userName) => {\r\n        setToken(jwtToken);\r\n        setUserId(id);\r\n        setUserName(userName);\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken, userName: userName\r\n        }))\r\n    }, [] );\r\n\r\n    const logout = useCallback( () => {\r\n        setToken(null);\r\n        setUserId(null);\r\n        localStorage.removeItem(storageName);\r\n    }, [] );\r\n\r\n\r\n    useEffect( () => {\r\n        const data = JSON.parse(localStorage.getItem(storageName));\r\n        if (data && data.token) {\r\n            login(data.token, data.userId, data.userName);\r\n        }\r\n        setReady(true);\r\n    }, [login] );\r\n\r\n    return { login, logout, token, userId, ready, userName }\r\n\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {Link} from 'react-router-dom'\r\nimport {useAuth} from \"../hooks/auth.hook\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\nexport const MainPage = () => {\r\n    const [show, setShow] = useState(false);\r\n    const {token} = useAuth();\r\n\r\n\r\n    useEffect(() => {\r\n        setShow(show => true)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <CSSTransition\r\n            classNames='item'\r\n            in={show}\r\n            timeout={1000}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div className='container-fluid vh-100 d-flex justify-content-center align-items-center flex-column'>\r\n                <h1 className='mb-0 text-center'>to see the covers, click here</h1>\r\n                <svg className=\"bi bi-arrow-down\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\"\r\n                          d=\"M4.646 9.646a.5.5 0 01.708 0L8 12.293l2.646-2.647a.5.5 0 01.708.708l-3 3a.5.5 0 01-.708 0l-3-3a.5.5 0 010-.708z\"\r\n                          clipRule=\"evenodd\"/>\r\n                    <path fillRule=\"evenodd\" d=\"M8 2.5a.5.5 0 01.5.5v9a.5.5 0 01-1 0V3a.5.5 0 01.5-.5z\"\r\n                          clipRule=\"evenodd\"/>\r\n                </svg>\r\n                <Link to='/covers'\r\n                      type='button'\r\n                      className='btn btn-outline-dark mt-5 '\r\n                      style={{transition: '0.3s'}}\r\n\r\n                >\r\n                    see\r\n                </Link>\r\n                {\r\n                    !!token ? <Link to='/create'\r\n                                    type='button'\r\n                                    className='btn btn-outline-dark position-fixed align-self-end'\r\n                                    style={{transition: '0.3s', bottom: '1rem'}}\r\n\r\n                        >\r\n                            create\r\n                        </Link>\r\n                        :\r\n                        <Link to='/auth'\r\n                              type='button'\r\n                              className='btn btn-outline-dark position-fixed align-self-end'\r\n                              style={{transition: '0.3s', bottom: '1rem'}}\r\n\r\n                        >\r\n                            authorization\r\n                        </Link>\r\n                }\r\n\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n};","import {createContext} from 'react';\r\n\r\nfunction noop(){}\r\n\r\nexport const AuthContext = createContext({\r\n   token: null,\r\n   userId: null,\r\n   login: noop,\r\n   logout: noop,\r\n   isAuthenticated: false,\r\n   userName: null\r\n});","import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"d-flex w-100 justify-content-center\">\r\n            <div className=\"spinner-border \" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import {useCallback, useState} from 'react';\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [message, setMessages] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}, create = false) => {\r\n        setLoading(true);\r\n        try {\r\n\r\n            if (body && !create) {\r\n                body = JSON.stringify(body);\r\n                headers['Content-Type'] = 'application/json';\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers});\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            setMessages(data.message);\r\n\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n    }, [])\r\n\r\n    return {loading, request, error, clearError, message}\r\n\r\n};","import {useCallback} from \"react\";\r\nimport React from \"react\";\r\n\r\nexport const useMessage = () => {\r\n    return useCallback(text => {\r\n        if (text) {\r\n            return (\r\n                <div className=\"alert alert-warning alert-dismissible fade show hide m-0 p-0 text-center\" role=\"alert\">\r\n                    {text}\r\n                </div>\r\n            )\r\n        }\r\n    }, [])\r\n};","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport './coverList.css'\r\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\r\n\r\n\r\nexport const CoverList = ({covers}) => (\r\n    <TransitionGroup component={'div'} className='row align-items-center '>\r\n        {covers.map((cover, index) => (\r\n            <CSSTransition\r\n                timeout={1000}\r\n                classNames=\"item\"\r\n                key={index}\r\n            >\r\n                <div className=\"col-8 col-sm-8 col-md-4 col-lg-4 col-xl-2 p-4\">\r\n                    <Link className='text-dark' to={`/detail/${cover._id}`}>\r\n                        <div className=\"card\" style={{cursor: 'pointer'}}>\r\n                            <div className=\"card-body\">\r\n                                <img src={cover.filedataName} className=\"card-img-top\" alt={cover.author}/>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </CSSTransition>\r\n        ))\r\n        }\r\n    </TransitionGroup>\r\n);\r\n\r\n\r\n","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {Loader} from \"../components/loader\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {CoverList} from \"../components/CoverList\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\n\r\nexport const CoversPage = () => {\r\n    const [covers, setCovers] = useState([]);\r\n    const {loading, request} = useHttp();\r\n    const {token} = useContext(AuthContext);\r\n    const [skip, setSkip] = useState(0);\r\n    const message = useMessage();\r\n    const [alert, setAlert] = useState(null);\r\n    const [shouldHideButton, setShouldHideButton] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const fetchCovers = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/covers/', 'GET', null, {\r\n                Authorization: `Bearer ${token}`,\r\n                skip: `${skip}`\r\n            });\r\n\r\n            if (fetched.length === 0) {\r\n                setShouldHideButton(true);\r\n                return setAlert(message('there are no more covers here'))\r\n            }\r\n            setCovers(covers => [...covers, ...fetched]);\r\n            setShow(true)\r\n\r\n        } catch (e) {\r\n        }\r\n\r\n    }, [token, request, skip, message]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchCovers();\r\n    }, [fetchCovers]);\r\n\r\n\r\n    if (covers.length === 0) {\r\n        return (\r\n            <div className='vh-100 d-flex align-items-center'>\r\n                <Loader/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <CSSTransition\r\n            classNames='item'\r\n            in={show}\r\n            timeout={1000}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div>\r\n                <Link to='/' type=\"button\" className=\"btn btn-link text-dark text-left\">\r\n                    <svg className=\"bi bi-arrow-left-short\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\r\n                         fill=\"currentColor\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fillRule=\"evenodd\"\r\n                              d=\"M7.854 4.646a.5.5 0 010 .708L5.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z\"\r\n                              clipRule=\"evenodd\"/>\r\n                        <path fillRule=\"evenodd\" d=\"M4.5 8a.5.5 0 01.5-.5h6.5a.5.5 0 010 1H5a.5.5 0 01-.5-.5z\"\r\n                              clipRule=\"evenodd\"/>\r\n                    </svg>\r\n\r\n                    go to the main page\r\n                </Link>\r\n                <div className='container-fluid d-flex flex-wrap flex-column justify-content-center pb-5'\r\n                     style={{minHeight: \"100vh\", textAlign: 'center'}}\r\n                >\r\n\r\n                    <CoverList covers={covers}/>\r\n                    {\r\n                        loading ?\r\n                            <Loader/>\r\n                            : null\r\n                    }\r\n\r\n                    {\r\n                        alert\r\n                    }\r\n                    {\r\n                        shouldHideButton ? null :\r\n                            <button onClick={() => setSkip(skip + 1)}\r\n                                    type='button'\r\n                                    className='btn btn-outline-dark mt-5 '\r\n                                    style={{transition: '0.3s'}}\r\n                            >\r\n                                click\r\n                            </button>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n};","import React, {useContext, useEffect, useReducer, useState} from \"react\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport {useAuth} from \"../hooks/auth.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\nexport const CreatePage = () => {\r\n    const history = useHistory();\r\n    const {isAuthenticated, logout} = useAuth();\r\n    const auth = useContext(AuthContext);\r\n    const {request} = useHttp();\r\n    const [alert, setAlert] = useState(null);\r\n    const message = useMessage();\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [fileInputIsEmpty, setFileInputIsEmpty] = useState(true)\r\n\r\n    const [cover, setCover] = useReducer(\r\n        (state, newState) => ({...state, ...newState}),\r\n        {\r\n            author: '',\r\n            label: '',\r\n            date: '',\r\n            genre: '',\r\n        }\r\n    );\r\n\r\n    const [coverImage, setCoverImage] = useState({});\r\n\r\n    const availableButton =\r\n        cover.author &&\r\n        cover.label &&\r\n        cover.date &&\r\n        cover.genre && !fileInputIsEmpty;\r\n\r\n\r\n\r\n    const changeHandler = evt => {\r\n        const name = evt.target.name;\r\n        const newValue = evt.target.value;\r\n        setCover({[name]: newValue})\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        bsCustomFileInput.init();\r\n        setShow(true)\r\n    }, []);\r\n\r\n    const submitHandler = async e => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('author', `${cover.author}`);\r\n        formData.append('label', `${cover.label}`);\r\n        formData.append('date', `${cover.date}`);\r\n        formData.append('genre', `${cover.genre}`);\r\n        formData.append('filedata', coverImage);\r\n        try {\r\n            const data = await request('/covers/create', 'POST', formData, {\r\n                Authorization: `Bearer ${auth.token}`\r\n            }, true);\r\n\r\n            switch (data.message) {\r\n                case 'no authorization':\r\n                    setAlert(message(data.message));\r\n                    setTimeout(() => {\r\n                        logout();\r\n                        history.push(`/`)\r\n                    }, 7000);\r\n                    break;\r\n                case 'wrong mimetype':\r\n                    setAlert(message(data.message));\r\n                    break;\r\n                default:\r\n            }\r\n\r\n\r\n            history.push(`/detail/${data.cover._id}`)\r\n\r\n        } catch (e) {\r\n        }\r\n    };\r\n\r\n    if (isAuthenticated) {\r\n        logout();\r\n        history.push(`/`)\r\n    }\r\n\r\n    return (\r\n        <CSSTransition\r\n            classNames='item'\r\n            in={show}\r\n            timeout={1000}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n        <div className='container-fluid d-flex flex-column text-center'>\r\n            <Link to='/covers' type=\"button\" className=\"btn btn-link text-dark text-left\">\r\n                <svg className=\"bi bi-arrow-left-short\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\"\r\n                          d=\"M7.854 4.646a.5.5 0 010 .708L5.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z\"\r\n                          clipRule=\"evenodd\"/>\r\n                    <path fillRule=\"evenodd\" d=\"M4.5 8a.5.5 0 01.5-.5h6.5a.5.5 0 010 1H5a.5.5 0 01-.5-.5z\"\r\n                          clipRule=\"evenodd\"/>\r\n                </svg>\r\n\r\n                go to the covers list\r\n            </Link>\r\n            <div className=\"row\">\r\n                <h2 className='p-5 col-12'>CREATE A NEW COVER</h2>\r\n                <form\r\n                    onSubmit={submitHandler}\r\n                    className='m-auto pb-5 col-12 col-sm-10 col-md-6 col-lg-6 col-xl-6'\r\n                    encType=\"multipart/form-data\"\r\n                >\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"author\">author</label>\r\n                        <input type=\"text\"\r\n                               className=\"form-control\"\r\n                               id=\"author\"\r\n                               aria-describedby=\"emailHelp\"\r\n                               value={cover.author}\r\n                               name='author'\r\n                               onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"label\">label</label>\r\n                        <input type=\"text\"\r\n                               className=\"form-control\"\r\n                               id=\"label\"\r\n                               aria-describedby=\"emailHelp\"\r\n                               value={cover.label}\r\n                               name='label'\r\n                               onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"date\">date</label>\r\n                        <input type=\"text\"\r\n                               className=\"form-control\"\r\n                               id=\"date\"\r\n                               aria-describedby=\"emailHelp\"\r\n                               value={cover.date}\r\n                               name='date'\r\n                               onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"genre\">genre</label>\r\n                        <input type=\"text\"\r\n                               className=\"form-control\"\r\n                               id=\"genre\"\r\n                               aria-describedby=\"emailHelp\"\r\n                               value={cover.genre}\r\n                               name='genre'\r\n                               onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"custom-file\">\r\n                        <input type=\"file\" className=\"custom-file-input\" id=\"customFile\"\r\n                               name='filedata'\r\n                               onChange={e => {\r\n                                   if (e.target.value.length > 0) {\r\n                                       setCoverImage(e.target.files[0]);\r\n                                       setFileInputIsEmpty(false);\r\n                                   } else if (e.target.value.length === 0) {\r\n                                       setFileInputIsEmpty(true)\r\n                                   }\r\n\r\n                               }\r\n                               }/>\r\n                        <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\r\n                    </div>\r\n                    <div className=\"form-group mt-4\">\r\n                        {\r\n                            alert\r\n                        }\r\n                    </div>\r\n                    <button\r\n                        type='submit'\r\n                        disabled={!availableButton}\r\n                        className='btn btn-outline-dark mt-5'\r\n                        style={{transition: '0.3s', bottom: '1rem'}}\r\n                    >\r\n                        submit\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        </CSSTransition>\r\n    )\r\n};","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\nexport const AuthPage = () => {\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const message = useMessage();\r\n    const [alert, setAlert] = useState(null);\r\n    const {loading, error, request} = useHttp();\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [form, setForm] = useState({\r\n        login: '',\r\n        password: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        setAlert(message(error));\r\n        setShow(true)\r\n    }, [error, message]);\r\n\r\n    const changeHandler = (e) => {\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    };\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/auth/register', 'POST', {...form});\r\n            setAlert(message(data.message));\r\n        } catch (e) {\r\n        }\r\n    };\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/auth/login', 'POST', {...form});\r\n            auth.login(data.token, data.userId, data.userName);\r\n            history.push(`/create`)\r\n        } catch (e) {}\r\n    };\r\n\r\n    return (\r\n        <CSSTransition\r\n            classNames='item'\r\n            in={show}\r\n            timeout={1000}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n        <div className='container-fluid d-flex flex-column text-center'>\r\n            <div className=\"row\">\r\n                <h2 className=\"pb-5 pt-5 col-12\">AUTHORIZATION</h2>\r\n                        <form className='m-auto pb-5 col-12 col-sm-10 col-md-6 col-lg-6 col-xl-6'>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"login\">login</label>\r\n                                <input type=\"login\"\r\n                                       className=\"form-control\"\r\n                                       id=\"login\"\r\n                                       aria-describedby=\"emailHelp\"\r\n                                       name=\"login\"\r\n                                       onChange={changeHandler}\r\n                                       value={form.login}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">password</label>\r\n                                <input type=\"password\"\r\n                                       className=\"form-control\"\r\n                                       id=\"password\"\r\n                                       name=\"password\"\r\n                                       onChange={changeHandler}\r\n                                       value={form.password}\r\n                                />\r\n                            </div>\r\n\r\n                                <div className='mb-3'>{alert}</div>\r\n\r\n                            <button className=\"btn btn-dark mb-2\"\r\n                                    style={{width: '100%'}}\r\n                                    disabled={loading}\r\n                                    onClick={loginHandler}\r\n                            >\r\n                                sign in\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-light\"\r\n                                style={{width: '100%'}}\r\n                                onClick={registerHandler}\r\n                                disabled={loading}\r\n                            >\r\n                                sign up\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n        </CSSTransition>\r\n    )\r\n};","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {Loader} from \"../components/loader\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport '../components/coverList.css'\r\n\r\nexport const DetailPage = () => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const {token} = useContext(AuthContext);\r\n    const {request, loading} = useHttp();\r\n    const [cover, setCover] = useState(null);\r\n    const coverId = useParams().id;\r\n\r\n    const getCover = useCallback(async () => {\r\n        try {\r\n\r\n            const fetched = await request(`/covers/${coverId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            });\r\n\r\n\r\n            await setCover(fetched);\r\n            setShow(true)\r\n        } catch (e) {\r\n        }\r\n    }, [token, coverId, request]);\r\n\r\n\r\n    useEffect(() => {\r\n        getCover();\r\n    }, [getCover]);\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className='vh-100 d-flex align-items-center'>\r\n                <Loader/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <CSSTransition\r\n            classNames='item'\r\n            in={show}\r\n            timeout={1000}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div className='container-fluid item'>\r\n                <Link to='/covers' type=\"button\" className=\"btn btn-link text-dark\">\r\n                    <svg className=\"bi bi-arrow-left-short\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\r\n                         fill=\"currentColor\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fillRule=\"evenodd\"\r\n                              d=\"M7.854 4.646a.5.5 0 010 .708L5.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z\"\r\n                              clipRule=\"evenodd\"/>\r\n                        <path fillRule=\"evenodd\" d=\"M4.5 8a.5.5 0 01.5-.5h6.5a.5.5 0 010 1H5a.5.5 0 01-.5-.5z\"\r\n                              clipRule=\"evenodd\"/>\r\n                    </svg>\r\n\r\n                    go to the covers list\r\n                </Link>\r\n                {\r\n                    !loading && !!cover\r\n                    &&\r\n\r\n                    <div className=\"jumbotron\">\r\n                        <img src={cover.filedataName}\r\n                             className='mw-100 bord'\r\n                             style={{borderRadius: '.3rem'}}\r\n                             alt=\"\"/>\r\n                        <hr/>\r\n                        <h1 className=\"display-4\">author: {cover.author}</h1>\r\n                        <hr/>\r\n                        <p className=\"lead\">label: {cover.label}</p>\r\n                        <p>genre: {cover.genre}</p>\r\n                        <p>date: {cover.date}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n};","import React from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {MainPage} from \"./pages/MainPage\";\r\nimport {CoversPage} from \"./pages/CoversPage\";\r\nimport {CreatePage} from \"./pages/CreatePage\";\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\nimport {DetailPage} from \"./pages/DetailPage\";\r\n\r\nconst useRoutes = isAuthenticated => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path='/' exact>\r\n                    <MainPage/>\r\n                </Route>\r\n                <Route path='/covers' exact>\r\n                    <CoversPage/>\r\n                </Route>\r\n                <Route path=\"/create\" exact>\r\n                    <CreatePage/>\r\n                </Route>\r\n                <Route path=\"/detail/:id\">\r\n                    <DetailPage/>\r\n                </Route>\r\n                <Redirect to=\"/\"/>\r\n            </Switch>\r\n        )\r\n\r\n    }\r\n    return (\r\n        <Switch>\r\n            <Route path='/' exact>\r\n                <MainPage/>\r\n            </Route>\r\n            <Route path='/covers' exact>\r\n                <CoversPage/>\r\n            </Route>\r\n            <Route path='/auth' exact>\r\n                <AuthPage/>\r\n            </Route>\r\n            <Route path=\"/detail/:id\">\r\n                <DetailPage/>\r\n            </Route>\r\n            <Redirect to=\"/\"/>\r\n        </Switch>\r\n    )\r\n}\r\nexport default useRoutes;","import React from 'react';\nimport useRoutes from \"./routes\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {useAuth} from \"./hooks/auth.hook\";\nimport {AuthContext} from \"./context/AuthContext\";\nimport {Loader} from \"./components/loader\";\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n    const {token, login, logout, userId, ready, userName} = useAuth();\n    const isAuthenticated = !!token;\n\n    const routes = useRoutes(isAuthenticated);\n    if (!ready) {\n        return <Loader/>\n    }\n  return (\n    <AuthContext.Provider value={{\n        token, login, logout, userId, isAuthenticated\n    }}>\n        <BrowserRouter>\n            <span style={{position: 'absolute', right: '0', padding: '.375rem .75rem'}}>hi, {userName}!</span>\n            { routes }\n        </BrowserRouter>\n\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}